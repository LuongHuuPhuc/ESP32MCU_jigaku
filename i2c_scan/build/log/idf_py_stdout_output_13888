[1/10] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D D:\Esp-idf\Esp32MCU_jigaku\i2c_scan\build\bootloader\esp-idf\esptool_py && D:\Esp-idf\Espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe D:/Esp-idf/Espressif/frameworks/esp-idf-v5.2.3/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 D:/Esp-idf/Esp32MCU_jigaku/i2c_scan/build/bootloader/bootloader.bin"
Bootloader binary size 0x6860 bytes. 0x7a0 bytes (7%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/i2c_scan.c.obj
[3/8] Linking C static library esp-idf\main\libmain.a
[4/8] Generating ld/sections.ld
[5/8] Building C object CMakeFiles/i2c_scan.elf.dir/project_elf_src_esp32.c.obj
[6/8] Linking CXX executable i2c_scan.elf
[7/8] Generating binary image from built executable
esptool.py v4.8.1
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated D:/Esp-idf/Esp32MCU_jigaku/i2c_scan/build/i2c_scan.bin
[8/8] cmd.exe /C "cd /D D:\Esp-idf\Esp32MCU_jigaku\i2c_scan\build\esp-idf\esptool_py && D:\Esp-idf\Espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe D:/Esp-idf/Espressif/frameworks/esp-idf-v5.2.3/components/partition_table/check_sizes.py --offset 0x8000 partition --type app D:/Esp-idf/Esp32MCU_jigaku/i2c_scan/build/partition_table/partition-table.bin D:/Esp-idf/Esp32MCU_jigaku/i2c_scan/build/i2c_scan.bin"
i2c_scan.bin binary size 0x2fce0 bytes. Smallest app partition is 0x100000 bytes. 0xd0320 bytes (81%) free.
